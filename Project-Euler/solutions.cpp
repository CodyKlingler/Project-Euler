#include <cmath>
#include <iostream>
#include <queue>
#include <stack>
#include "myMath.h"

//TODO: figure out a consistent usage of types.
//TODO: make sure to delete all heap allocated arrays.
//TODO: change implementation of the sieve in pe7 and pe10 to not include a queue
//TODO: add two sieve functions to myMath.cpp that generate all primes less than n, and the first n primes.
//TODO: debug the more efficient solution to pe8
//TODO: add the problem statement to each function.

using namespace std;



/*Problem 1
* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
*
* Find the sum of all the multiples of 3 or 5 below 1000.
*/

//computed as sum of multiples of 3 and multiples of 5, minus multiples of 15
//Obvious Solution: O(n)
//My Solution: O(1)
int pe1() {
    return SumMultiplesOfNtoK(3, 999) + SumMultiplesOfNtoK(5, 999) - SumMultiplesOfNtoK(15, 999);
}

/*Problem 2
* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*
*/

//There may be a more efficient solution using the golden ratio or weird number theory.
//O(n)
int pe2() {
    const int UPPER_BOUND = 40000000; //sum digits less than upper bound
    int b = 0;
    int a = 1;
    int nextTerm = 1;
    int evenSum = 0;
    while (nextTerm < UPPER_BOUND) { //generate each term in the sequence. 
        if (!(nextTerm % 2)) {
            evenSum += nextTerm;    //add the even ones to our running sum.
        }
        b = a;
        a = nextTerm;
        nextTerm = a + b;
    }
    return evenSum;
}


/*Problem 3
* The prime factors of 13195 are 5, 7, 13 and 29.
*
* What is the largest prime factor of the number 600851475143 ?
*/

//find smallest prime factor, divide n. repeat
//O(n) - worst case
long long pe3() {
    long long n = 600851475143L;

    long long largestPrimeFactor = 0;
    for (int currentFactor = 2; currentFactor < n; currentFactor++) { //check each numberfactor less than n for divisibility
        if (!(n % currentFactor)) { //if evenly divisible, we found a factor
            if (currentFactor > largestPrimeFactor) // check if its the largest factor so far.
                largestPrimeFactor = currentFactor;
            n /= currentFactor; // reduce the number that we are checking to speed things up
            currentFactor = 1; // restart linear scan from n=2 since we divided by the factor found
        }
    }
    if (n > largestPrimeFactor) // the remaining number should always be the largest prime factor, but check just in case
        largestPrimeFactor = n;
    return largestPrimeFactor;
}



/*Problem 4
* A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
*
* Find the largest palindrome made from the product of two 3-digit numbers.
*/

//maybe could be optimized with weird number theory
//O(n**2) - worst case - starts with largest values on multiplication table (from perfect squares to the edges)
bool isPalindrome(long n); //helper to p4
long pe4() {
    for (long i = 999; i > 0; i--) {
        long tempi = i;
        stack<long> s;
        for (long j = 999; j >= tempi && tempi <= 999; j--, tempi++) { // start from the edges of the multiplication table and work towards the middle
            s.push(i * j); // the elements in the middle have the largest product, so the stack lets us chech those first
        }
        while (s.size()) {
            if (isPalindrome(s.top())) { //check all of the elements in the stack for a palindrome
                return s.top(); //the first palindrome that we find is the biggest
            }
            s.pop();
        }
    }
}
//helper to p4
bool isPalindrome(long n) {
    int len = (int)(log10(n) + .9999999); //find the amount of digits in decimal notation. (should use cieling function rather than add .9999)
    int* nums = new int[len] { -1 };

    for (int i = len - 1; i >= 0; i--) { //find the representation in decimal
        nums[i] = n % 10;
        n /= 10;
    }

    for (int i = 0; i <= len - 1 - i; i++) { //check if its a palindrome
        if (nums[i] != nums[len - 1 - i])
            return false;
    }
    return true;
}

/*Problem 5
* 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
*
* What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/

//O(~n) (actually O(primes less than n))
uint64_t pe5() {
    int primeArr[] = { 2, 3, 5, 7, 11, 13, 17, 19 }; //primes less than 20

    uint64_t product = 1;
    for (int currentPrime : primeArr) {
        //find the amount numbers below 20 that consist purely of factors of the current prime, 
        //in other words powers of the current prime < 20, (logp(20)). 
        //this p^n is equal is also equal to the LARGEST power of p less than 20
        int n = (int)((log10(20) / log10(currentPrime)) + .0001);
        product *= uint64_t(pow(currentPrime, n) + .5); //make our product divisible by all possible factors of p.
    }
    return product;
}

/*Problem 6
* The sum of the squares of the first ten natural numbers is,
*     1**2 + 2**2 + ... + 10**2 = 385
* The square of the sum of the first ten natural numbers is,
*     (1 + 2 + ... + 10)**2 = 55**2 = 3025
* Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
*     3025 - 385 = 2640
* Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/

//O(n)
long pe6() {
    const int N = 100;
    long sumOfSq = 0;
    long SqOfSum = Sum1ToN(N); //find sum of 1 to 100 in O(1)
    SqOfSum *= SqOfSum; // square

    for (int i = 1; i <= N; i++) // calculate each square from 1 to 100
        sumOfSq += i * i;

    return SqOfSum - sumOfSq;
}

/*Problem 7
* By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
*
* What is the 10,001st prime number?
*/
long pe7() {
    const int findPrime = 10001; //find the 10001st prime
    const int upperBound = 600000; //the algorithm works best if you provide an upper bound for the value. code could be improved by rerunning with increased bound if this one is too low
    bool isComposite[upperBound] = { 0 };
    int primesFound = 1;

    queue<int> primes; //does not need a queue. remove!!!!
    primes.push(2);

    while (primes.size()) {
        int currentPrime = primes.front();
        primes.pop();

        for (int k = currentPrime; k < upperBound; k += currentPrime) { //mark all factors of the current prime as composite.
            isComposite[k] = 1;
        }

        for (int j = currentPrime + 1; j < upperBound; j++) { //find the next prime number
            if (!isComposite[j]) { //the next non-marked number is prime.
                primes.push(j);
                primesFound++;
                if (primesFound == findPrime) { // if this is the 10001st prime, return it
                    return j;
                }
                break;   //stop searching for the next prime. we just found it.
            }
        }
    }
    return 0;
}


/*Problem 8
* The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

* Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

//Obvious but less efficient solution
//O(nm), n=windowSize, m = log10(number) (length of number)
uint64_t pe8() {
    const char num[] = "316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    const int numLen = 1000; //length of the number
    const int windowSize = 13; //the amount of numbers to multiply together at once

    uint64_t currentProduct;
    uint64_t max = 0;
    for (int i = 0; i < numLen - windowSize; i++) { //multiply each window of 13 elements to determine the max.
        currentProduct = 1;
        for (int j = 0; j < windowSize; j++) {
            currentProduct *= num[i + j] - '0';
        }
        if (currentProduct > max)
            max = currentProduct;
    }
    return max;
}

//TODO: debug
//opimized by making this a true sliding window. special handling of zero values to prevent div/0
//Obvious solution is O(n*m), n=windowSize, m = numLen
//This is O(m), m = log10(number) (length of number)
uint64_t pe8e() {
    const char num[] = "316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    const int numLen = 1000;
    const int windowSize = 13;

    uint64_t currentProduct = 1;
    int zeroCount = 0;

    for (int i = 0; i < windowSize; i++) { //multiply the first 13 elements to find the first product
        int nextInt = num[i] - '0';
        if (nextInt == 0) {
            nextInt = (zeroCount == 0) ? -1 : 1; //if we have encountered a zero, make the product negative.
            zeroCount++;                        //this allows us to keep accurate information on the window without creating a false maximum
        }
        currentProduct *= nextInt;
    }

    uint64_t max = currentProduct;
    for (int i = windowSize; i < numLen; i++) {
        int nextInt = num[i] - '0'; //the int leaving the window
        int prevInt = num[i - windowSize] - '0'; //the int entering the window

        if (prevInt == 0) { // if the element leaving the window is zero, we can potentially do max calculations again.
            zeroCount--;
            prevInt = (zeroCount == 0) ? -1 : 1; //if there are no more zeroes in the window, make the product positive by dividing by -1
        }

        if (nextInt == 0) { //if the element coming in is zero
            nextInt = (zeroCount == 0) ? -1 : 1; //if we havent encountered a zero, make the sum negative.
            zeroCount++;
        }

        currentProduct /= prevInt; //remove the old element from the product
        currentProduct *= nextInt; //multiply by the new one
        if (currentProduct > max)
            max = currentProduct;
    }

    return max;
}

/*Problem 9
* A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
*
* a^2 + b^2 = c^2
* For example, 3^2 + 4^2 = 9 + 16 = 25 = 52.
*
* There exists exactly one Pythagorean triplet for which a + b + c = 1000.
* Find the product abc.
*/


//obvious solution is to check every combination of a and b in a**2 + b**2 = c**2
//obvious is O(n**2), n = perimeter (1000)
//my solution is O(n). if A is given, you can derive a formula to solve for the exact value of B.  
//my solution also doesn't use square roots or floats, which would be (slightly) expensive and approximate.
//It may be possible to solve this even faster. the triple that is found is an integer factor of the triple 8, 15, 17. [1000 % (8*15*17) = 0] 
uint64_t pe9() {
    //(1000-(a+b))^2 = a^2 + b^2 = c^2

    const int perimeter = 1000; //the problem asks for a perimeter of 1000

    //       (1000)*(1000 - 2a)        I found this on my own by messing with triangle formulas. 
    // b = -----------------------,    it allows us to calculate the value of 'b' that makes the perimeter 1000 if we know 'a'
    //          2*(1000-a)             using it, we can find the b value that makes the equation true

    for (int a = 1; a < perimeter - 2; a++) { //if we assume all possible integer values for 'a', then 
        uint64_t numerator = perimeter * (perimeter - 2 * a);
        uint64_t denominator = 2 * (perimeter - a);
        int b = numerator / denominator;                //find b using the formula shown above
        if (b && numerator % denominator == 0) {//check that b is an integer.
            int c = perimeter - (a + b);        //find c.
            cout << a << " " << b << " " << c << endl;
            return a * b * c;       //return product of sides
        }
    }
    cout << "Problem 9: No triangle found." << endl;
    return -1;
}


/*The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
*Find the sum of all the primes below two million.
*/
//using my sieve from problem 7,
//make an array of two million booleans, make a number's element true if it is composite. 
uint64_t pe10() {
    const uint64_t maxValue = 2000000;  //find all primes less than this number
    bool* isComposite = new bool[maxValue] {0};

    uint64_t sum = 0;   //final sum to return
    queue<int> primes;
    primes.push(2);

    while (primes.size()) {
        int currentPrime = primes.front();  //get the last prime that we found
        primes.pop();                       //remove it because we dont need it anymore
        //cout << currentPrime << endl;
        sum += currentPrime;

        int k;
        for (int k = currentPrime; k < maxValue; k += currentPrime) { //mark all factors of the current prime as composite
            isComposite[k] = true;
        }

        for (int j = currentPrime + 1; j < maxValue; j++) { //the next non-composite number after the current one is guaranteed to be prime. find it and repeat
            if (!isComposite[j]) {
                primes.push(j);
                break;
            }
        }

    }
    return sum;
}


/*
In the 20×20 grid below, four numbers along a diagonal line have been enclosed in angle brackets

08  02  22  97  38  15  00  40  00  75  04  05  07  78  52  12  50  77  91  08
49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  04  56  62  00
81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  03  49  13  36  65
52  70  95  23  04  60  11  42  69  24  68  56  01  32  56  71  37  02  36  91
22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80
24  47  32  60  99  03  45  02  44  75  33  53  78  36  84  20  35  17  12  50
32  98  81  28  64  23  67  10 <26> 38  40  67  59  54  70  66  18  38  64  70
67  26  20  68  02  62  12  20  95 <63> 94  39  63  08  40  91  66  49  94  21
24  55  58  05  66  73  99  26  97  17 <78> 78  96  83  14  88  34  89  63  72
21  36  23  09  75  00  76  44  20  45  35 <14> 00  61  33  97  34  31  33  95
78  17  53  28  22  75  31  67  15  94  03  80  04  62  16  14  09  53  56  92
16  39  05  42  96  35  31  47  55  58  88  24  00  17  54  24  36  29  85  57
86  56  00  48  35  71  89  07  05  44  44  37  44  60  21  58  51  54  17  58
19  80  81  68  05  94  47  69  28  73  92  13  86  52  17  77  04  89  55  40
04  52  08  83  97  35  99  16  07  97  57  32  16  26  26  79  33  27  98  66
88  36  68  87  57  62  20  72  03  46  33  67  46  55  12  32  63  93  53  69
04  42  16  73  38  25  39  11  24  94  72  18  08  46  29  32  40  62  76  36
20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  04  36  16
20  73  35  29  78  31  90  01  74  31  49  71  48  86  81  16  23  57  05  54
01  70  54  71  83  51  54  69  16  92  33  48  61  43  52  01  89  19  67  48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
*/

uint64_t pe11() {
    const int h = 20;
    const int w = 20;
    const int windowLen = 4;  //number of adjacent elements
    uint8_t arr[h][w] = {
        {8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8},
        {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0},
        {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65},
        {52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91},
        {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
        {24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
        {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
        {67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21},
        {24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
        {21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95},
        {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92},
        {16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57},
        {86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
        {19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40},
        {4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
        {88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
        {4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36},
        {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16},
        {20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54},
        {1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48}
    };

    uint64_t max = 0;
    uint64_t currentProduct = 1;

    //up-down
    for (int i = 0; i < w; i++) { //for each column
        for (int j = 0; j <= h - windowLen; j++) { //and for the topmost rows
            uint64_t currentProduct = 1;
            for (int k = 0; k < windowLen; k++) { //calculate the product of the vertical window
                currentProduct *= arr[j + k][i];
            }
            if (currentProduct > max)
                max = currentProduct;
        }
    }

    //left-right
    for (int i = 0; i <= w - windowLen; i++) {//for the left most columns
        for (int j = 0; j < h; j++) { //for each row
            uint64_t currentProduct = 1;
            for (int k = 0; k < windowLen; k++) {
                currentProduct *= arr[j][i + k]; // calculate product of horizontal window
            }
            if (currentProduct > max)
                max = currentProduct;
        }
    }
    //diagonal, negative slope
    for (int i = 0; i < w - windowLen + 1; i++) { //for the left most columns
        for (int j = 0; j < h - windowLen + 1; j++) {//for top most rows
            uint64_t currentProduct = 1;
            for (int k = 0; k < windowLen; k++) { //calculate the diagonal down and to right
                uint8_t element = arr[j + k][i + k];
                currentProduct *= element;
            }
            if (currentProduct > max)
                max = currentProduct;
        }
    }

    //diagonal, positive slope
    for (int i = 0; i <= w - windowLen; i++) { //for left=most columns
        for (int j = h - 1; j >= windowLen - 1; j--) { //for bottom-most rows
            uint64_t currentProduct = 1;
            for (int k = 0; k < windowLen; k++) { //calculate diagonal up and to the right
                uint8_t element = arr[j - k][i + k];
                currentProduct *= element;
            }
            if (currentProduct > max)
                max = currentProduct;
        }
    }
    return max;
}

/*Problem 12
*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
*
*   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*
* Let us list the factors of the first seven triangle numbers:
*
*  1: 1
*  3: 1,3
*  6: 1,2,3,6
* 10: 1,2,5,10
* 15: 1,3,5,15
* 21: 1,3,7,21
* 28: 1,2,4,7,14,28
* We can see that 28 is the first triangle number to have over five divisors.
*
* What is the value of the first triangle number to have over five hundred divisors?
*/

//find the prime factorization of the current triangle factor. 
//keep track of the number of unique and non-unique prime factors. Do math to find out the amount of unique combinations of factors.
//2^n yields the factors composed of unique primes (n = unique primes). for each prime factor multiply by the amount of times the prime is repeated (1+.5*m ) (m = quantity of each prime, minus one).
//for example, the prime factorization of 45 is 3*3*5. n = 2, (3 and 5 are unique), m3 = 1. m5 = 0. (factors of 45) = 2^n * (1 + .5*m3) * (1 + .5 * m5) = 6. 
uint64_t pe12() {

    const uint64_t n = 16000; //generate all primes less than n. increase n if you also increase the number of factors to beyond 500.
    bool* p = new bool[n] {0};

    vector<long> primes;
    primes.push_back(2);
    int primesFound = 1;

    //generate primes via sieve.
    for (int i = 0; i < n; i++) {
        int currentPrime = primes[primesFound - 1];
        for (int k = currentPrime; k < n; k += currentPrime) {
            p[k] = 1;
        }
        for (int j = currentPrime + 1; j < n; j++) {
            if (!p[j]) {
                primes.push_back(j);
                primesFound++;
                break;
            }
        }
    }
    //put the primes into an array for quick access.
    long* primeArr = new long[primes.size()];
    std::vector<long>::iterator it = primes.begin();
    for (int i = 0; it != primes.end(); it++, i++) {
        primeArr[i] = *it;
    }


    long long triangleNum = 0; //current triangle number
    int pCount;
    const int divisors = 500;
    short pFCount[divisors] = { 0 }; //array that counts how many times each prime can divide the triangle number
    short uPFactors[divisors] = { 0 }; //array that tracks which unique primes divide the triangle number

    // as an example, 360 = 2*2*2 * 3*3 * 5
    // uPFactors = { 2,  3,  5 }  <-- unique primes
    // pFCount   = { 3,  2,  1 }  <-- number of occurences

    for (int i = 1; ; i++) {
        triangleNum += i;

        long long currentTriangleNum = triangleNum;
        pCount = 0;

        // continually go through all primes less than current triangle number. divide it by any prime factors. 
        //keep track of how many unique, and non unique prime factors. Do math to find out the amount of unique combinations of factors.
        for (int j = 0; primeArr[j] <= currentTriangleNum && j < primes.size(); j++) {
            if (currentTriangleNum % primeArr[j] == 0) {
                uPFactors[pCount] = primeArr[j];
                pFCount[pCount] = 0;
                while (currentTriangleNum % primeArr[j] == 0) {
                    currentTriangleNum /= primeArr[j];
                    pFCount[pCount]++;
                }
                pCount++;
            }
        }
        if (currentTriangleNum > primeArr[primes.size() - 1]) {
            return -2; //didnt generate enough primes. increase 'n'
        }

        //2^n * (1 + m2 * .5) * (1 + m3 * .5) * ...
        int numberOfFactors = pow(2, pCount); //Use the binomial theorem to find combinations of unique primes. (2^n)
        for (int j = 0; j < pCount; j++) {
            numberOfFactors *= (1 + .5 * (pFCount[j] - 1)); //accounts for repeated primes.
        }
        if (numberOfFactors > 500) {
            return triangleNum;
        }
    }
    return -1;
}


/*Problem 13
* Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

* 37107287533902102798797998220837590246510135740250
* 46376937677490009712648124896970078050417018260538
* 74324986199524741059474233309513058123726617309629
* 91942213363574161572522430563301811072406154908250
* 23067588207539346171171980310421047513778063246676
* 89261670696623633820136378418383684178734361726757
* ......
* ......
* 53503534226472524250874054075591789781264330331690
*/
//100 numbers, each with 50 digits.
//find the first 10 digits of the sum.
//add 10 (could be 9) leading zeroes to the numbers being added. after you add the digits, trim the least significant one.
//adding the leading zeroes ensures that we have enough digits at the end.
uint64_t pe13() {
    //100 numbers, each with 50 digits.
    char num[100][51] = {
        {"37107287533902102798797998220837590246510135740250"},
        {"46376937677490009712648124896970078050417018260538"},
        {"74324986199524741059474233309513058123726617309629"},
        {"91942213363574161572522430563301811072406154908250"},
        {"23067588207539346171171980310421047513778063246676"},
        {"89261670696623633820136378418383684178734361726757"},
        {"28112879812849979408065481931592621691275889832738"},
        {"44274228917432520321923589422876796487670272189318"},
        {"47451445736001306439091167216856844588711603153276"},
        {"70386486105843025439939619828917593665686757934951"},
        {"62176457141856560629502157223196586755079324193331"},
        {"64906352462741904929101432445813822663347944758178"},
        {"92575867718337217661963751590579239728245598838407"},
        {"58203565325359399008402633568948830189458628227828"},
        {"80181199384826282014278194139940567587151170094390"},
        {"35398664372827112653829987240784473053190104293586"},
        {"86515506006295864861532075273371959191420517255829"},
        {"71693888707715466499115593487603532921714970056938"},
        {"54370070576826684624621495650076471787294438377604"},
        {"53282654108756828443191190634694037855217779295145"},
        {"36123272525000296071075082563815656710885258350721"},
        {"45876576172410976447339110607218265236877223636045"},
        {"17423706905851860660448207621209813287860733969412"},
        {"81142660418086830619328460811191061556940512689692"},
        {"51934325451728388641918047049293215058642563049483"},
        {"62467221648435076201727918039944693004732956340691"},
        {"15732444386908125794514089057706229429197107928209"},
        {"55037687525678773091862540744969844508330393682126"},
        {"18336384825330154686196124348767681297534375946515"},
        {"80386287592878490201521685554828717201219257766954"},
        {"78182833757993103614740356856449095527097864797581"},
        {"16726320100436897842553539920931837441497806860984"},
        {"48403098129077791799088218795327364475675590848030"},
        {"87086987551392711854517078544161852424320693150332"},
        {"59959406895756536782107074926966537676326235447210"},
        {"69793950679652694742597709739166693763042633987085"},
        {"41052684708299085211399427365734116182760315001271"},
        {"65378607361501080857009149939512557028198746004375"},
        {"35829035317434717326932123578154982629742552737307"},
        {"94953759765105305946966067683156574377167401875275"},
        {"88902802571733229619176668713819931811048770190271"},
        {"25267680276078003013678680992525463401061632866526"},
        {"36270218540497705585629946580636237993140746255962"},
        {"24074486908231174977792365466257246923322810917141"},
        {"91430288197103288597806669760892938638285025333403"},
        {"34413065578016127815921815005561868836468420090470"},
        {"23053081172816430487623791969842487255036638784583"},
        {"11487696932154902810424020138335124462181441773470"},
        {"63783299490636259666498587618221225225512486764533"},
        {"67720186971698544312419572409913959008952310058822"},
        {"95548255300263520781532296796249481641953868218774"},
        {"76085327132285723110424803456124867697064507995236"},
        {"37774242535411291684276865538926205024910326572967"},
        {"23701913275725675285653248258265463092207058596522"},
        {"29798860272258331913126375147341994889534765745501"},
        {"18495701454879288984856827726077713721403798879715"},
        {"38298203783031473527721580348144513491373226651381"},
        {"34829543829199918180278916522431027392251122869539"},
        {"40957953066405232632538044100059654939159879593635"},
        {"29746152185502371307642255121183693803580388584903"},
        {"41698116222072977186158236678424689157993532961922"},
        {"62467957194401269043877107275048102390895523597457"},
        {"23189706772547915061505504953922979530901129967519"},
        {"86188088225875314529584099251203829009407770775672"},
        {"11306739708304724483816533873502340845647058077308"},
        {"82959174767140363198008187129011875491310547126581"},
        {"97623331044818386269515456334926366572897563400500"},
        {"42846280183517070527831839425882145521227251250327"},
        {"55121603546981200581762165212827652751691296897789"},
        {"32238195734329339946437501907836945765883352399886"},
        {"75506164965184775180738168837861091527357929701337"},
        {"62177842752192623401942399639168044983993173312731"},
        {"32924185707147349566916674687634660915035914677504"},
        {"99518671430235219628894890102423325116913619626622"},
        {"73267460800591547471830798392868535206946944540724"},
        {"76841822524674417161514036427982273348055556214818"},
        {"97142617910342598647204516893989422179826088076852"},
        {"87783646182799346313767754307809363333018982642090"},
        {"10848802521674670883215120185883543223812876952786"},
        {"71329612474782464538636993009049310363619763878039"},
        {"62184073572399794223406235393808339651327408011116"},
        {"66627891981488087797941876876144230030984490851411"},
        {"60661826293682836764744779239180335110989069790714"},
        {"85786944089552990653640447425576083659976645795096"},
        {"66024396409905389607120198219976047599490197230297"},
        {"64913982680032973156037120041377903785566085089252"},
        {"16730939319872750275468906903707539413042652315011"},
        {"94809377245048795150954100921645863754710598436791"},
        {"78639167021187492431995700641917969777599028300699"},
        {"15368713711936614952811305876380278410754449733078"},
        {"40789923115535562561142322423255033685442488917353"},
        {"44889911501440648020369068063960672322193204149535"},
        {"41503128880339536053299340368006977710650566631954"},
        {"81234880673210146739058568557934581403627822703280"},
        {"82616570773948327592232845941706525094512325230608"},
        {"22918802058777319719839450180888072429661980811197"},
        {"77158542502016545090413245809786882778948721859617"},
        {"72107838435069186155435662884062257473692284509516"},
        {"20849603980134001723930671666823555245252804609722"},
        {"53503534226472524250874054075591789781264330331690"}
    };
    uint64_t sum = 0;



    //sum the numbers on digit at a time from least significant digit to most significant
    for (int c = 49; c >= 0; c--) {
        for (int n = 0; n < 100; n++) {
            sum += (num[n][c] - '0') * pow(10, 10);
            //by adding ten leading zeroes to the numbers being added we can easily store 10 digits at the least.

        }
        sum /= 10; //when you move to the next numbers place, divide the sum by ten to remove the least significant digit.
    }

    while (sum >= (uint64_t)pow(10, 10)) //trim all but ten of the digits
        sum /= 10;

    return sum;
}

/*Problem 14
* The following iterative sequence is defined for the set of positive integers:
*
* n -> n/2 (n is even)
* n -> 3n + 1 (n is odd)
*
* Using the rule above and starting with 13, we generate the following sequence:
*
* 13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
* It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
*
* Which starting number, under one million, produces the longest chain?
*
* NOTE: Once the chain starts the terms are allowed to go above one million.
*/

//I don't think that there are any optimizations that you can do. This problem is straight forward.
long pe14() {
    const int MAX_STARTING_NUMBER = 1000000;

    long longestChain = -1;
    long numberWithLongestChain = -1;

    for (long currentStartingNumber = 1; currentStartingNumber < MAX_STARTING_NUMBER; currentStartingNumber++) { //for all numbers in the range 1 : 1,000,000
        long long n = currentStartingNumber;
        long chainLength = 0;
        while (n != 1) {
            n = (n % 2) ? n * 3 + 1 : n / 2; //check if odd or even and do collatz sequence
            chainLength++;
        }
        if (chainLength > longestChain) { //determine if this is the longest sequence
            longestChain = chainLength;
            numberWithLongestChain = currentStartingNumber;
        }
    }
    return numberWithLongestChain;
}

/*Problem 15
*Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
*How many such routes are there through a 20×20 grid?
*/

void reducePascals(long long arr[], int len, long long& n); //helper to problem 15.

long long pe15() {
    // this is nchoosek(40,20)
    // 
    //         40!
    //  -----------------
    //    20!(40! - 20!)
    // 
    // , but this is difficult to compute directly because factorials are so large.
    // 
    // you will have to find an equivalence of the factorial that is easier to compute
    // You can either reduce factors beyond just cancelling terms of the factorials from the top and bottom (make a list of the prime factors of the numerator and denominator)
    // OR you can use floats to get a very close approximation by multiplying and dividing the terms at the same time to reduce growth
    // OR you can use a binomial expansion (sum of factorials), generate the 20th row of pascals triangle and 
    // I will sum the binomial expansion, but i admit that a function to reduce factorials may be useful later.
    const int lengthSide = 20;
    long long pascalsTriangle[lengthSide + 1] = { 0 };

    for (int i = 0; i < lengthSide + 1; i++) {
        pascalsTriangle[i] = nchoosek(lengthSide, i); //generate the 20th row of pascals triangle
        //cout << pascalsTriangle[i] << " ";
    }
    //cout << endl;
    long long ret;
    reducePascals(pascalsTriangle, lengthSide + 1, ret); //sums the elements of the array given to find the middle element of the 40th row
    return ret;
}

void reducePascals(long long arr[], int len, long long& n) {

    if (len == 2) {
        n = arr[0] + arr[1]; // ther are no more elements to reduce after this
        return;
    }

    long long* nextRow = new long long[len - 1]; //array for the next partial row of pascals triangle

    for (int i = 0; i < len - 1; i++) {
        nextRow[i] = arr[i] + arr[i + 1]; //fill the array with the sums from the previous row.
        //cout << nextRow[i] << " ";
    }
    //cout << endl;
    reducePascals(nextRow, len - 1, n);
    delete[] nextRow;
}

/*Problem 16
* 2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
*
* What is the sum of the digits of the number 2**1000?
*/
//sum of the digits of 2^1000
//calculates 2^1000 by storing digits in an array.
long pe16() {
    const int len = 302; //302 is cieling(log10(2^1000))
    short powerOfTwo[len] = { 0 }; //store each digit of the current power of two. p[0] being least significant digit, p[len-1] being most significant
    powerOfTwo[0] = 1; // 2^0

    int currentMostSignificantDigit = 0; //keeps us from doing useless multiplications on leading zeroes

    for (int i = 0; i < 1000; i++) {
        for (int d = currentMostSignificantDigit; d >= 0; d--) { //double the number in p2. work from most significant down.
            int digitsPlace = d;
            short times2 = powerOfTwo[digitsPlace] * 2; //double the current digit
            powerOfTwo[digitsPlace] = times2 % 10;      //get the next digit from the product
            while (times2 /= 10) {                      //any remaining digits must be added to their respective place.
                digitsPlace++;
                times2 += powerOfTwo[digitsPlace];
                powerOfTwo[digitsPlace] = times2 % 10;
            }
            if (digitsPlace > currentMostSignificantDigit) //update most significant digit if necessary
                currentMostSignificantDigit = digitsPlace;
        }
    }
    long sum = 0;
    for (int r = currentMostSignificantDigit; r >= 0; r--) { //sum the digits
        sum += powerOfTwo[r];
    }
    return sum;
}



/*Problem 17
* If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
*
* If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
*
* NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
*/


//helper for problem 14
//finds the string length of a number
int lookuplength(int n);
//helper for iterative version of problem 14
//recursively breaks down a number to find the length of its expansion
int numlen(int n);
//calculates the sum by counting the amount of times that each word is used.
//i should have written the code to be more dynamic, but it works fine for calculating the sum for n=1000
//faster than iterative approach, but less expandable
long pe17() {
    long sum = 0;

    sum += lookuplength(1) * (9 * 10 + 100 + 1); // "one" appears 9 times for each hundred, (21, 31, 41...), 100 times for "one hundred and..", 1 time for one thousand
    for (int i = 2; i < 10; i++) {
        sum += lookuplength(i) * (9 * 10 + 100); // "two", "three, ... "nine"  all appear 9 times for each hundred, and 100 times for a hundred ("three hundred and.. ")
    }

    for (int i = 10; i < 20; i++) { // each teen appears once for each hundred.
        sum += lookuplength(i) * 10;
    }
    for (int i = 2; i < 10; i++) {
        sum += lookuplength(i * 10) * 10 * 10;  //each ten, "twenty", "thirty", .., etc appears 10 times per hundred (21, 22, 23...)
    }
    sum += lookuplength(100) * 100 * 9; // "hundred" appears 100 times per hundred over 99

    sum += lookuplength(1000); // "thousand" appears once
    sum += strlen("and") * 99 * 9; // and appears 99 times for each hundred over 99.

    return sum;
}

//generates each word and counts the length.
long pe17_iterative() {
    long sum = 0;
    for (int i = 1; i <= 1000; i++) { //for every single number, n <= 1000
        int thislen = numlen(i);      //find how many characters it has by expansion
        sum += thislen;
    }
    return sum;
}

//returns the length of a number's expansion into words
int numlen(int n) {
    if (n == 1000) {
        return lookuplength(1) + lookuplength(1000); //"one" "thousand"
    }
    if (n >= 100) {
        int len = lookuplength(n / 100) + lookuplength(100); // "one" "hundred"
        if (n % 100 != 0)
            len += (numlen(-1) + numlen(n % 100)); //number appearing after hundred, and "and"
        return len;
    }
    if (n <= 19) {
        return lookuplength(n); //numbers less than 20 do not need expanded
    }
    if (n < 100) {
        return lookuplength(10 * (n / 10)) + lookuplength(n % 10); //"twenty" + [ones place]
    }
}


//looks up the string length of a number's word
int lookuplength(int n) {
    //possibly can be sped-up by preprocessing these values before compilation, unless the compiler does it for us. not significant for the non-iterative calculation.
    const char* word;
    switch (n) {
    case 0: return strlen("");
    case 1: return strlen("one");
    case 2: return strlen("two");
    case 3: return strlen("three");
    case 4: return strlen("four");
    case 5: return strlen("five");
    case 6: return strlen("six");
    case 7: return strlen("seven");
    case 8: return strlen("eight");
    case 9: return strlen("nine");
    case 10: return strlen("ten");
    case 11: return strlen("eleven");
    case 12: return strlen("twelve");
    case 13: return strlen("thirteen");
    case 14: return strlen("fourteen");
    case 15: return strlen("fifteen");
    case 16: return strlen("sixteen");
    case 17: return strlen("seventeen");
    case 18: return strlen("eighteen");
    case 19: return strlen("nineteen");
    case 20: return strlen("twenty");
    case 30: return strlen("thirty");
    case 40: return strlen("forty");
    case 50: return strlen("fifty");
    case 60: return strlen("sixty");
    case 70: return strlen("seventy");
    case 80: return strlen("eighty");
    case 90: return strlen("ninety");
    case 100: return strlen("hundred");
    case 1000: return strlen("thousand");
    default: return strlen("and");
    }
}




/*Problem 18
* By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
*
*    3
*   7 4
*  2 4 6
* 8 5 9 3
*
* That is, 3 + 7 + 4 + 9 = 23.
*
* Find the maximum total from top to bottom of the triangle below:
*
*               75
*              95 64
*             17 47 82
*            18 35 87 10
*           20 04 82 47 65
*          19 01 23 75 03 34
*         88 02 77 73 07 63 67
*        99 65 04 28 06 16 70 92
*       41 41 26 56 83 40 80 70 33
*      41 48 72 33 47 32 37 16 94 29
*     53 71 44 65 25 43 91 52 97 51 14
*    70 11 33 28 77 73 17 78 39 68 17 57
*   91 71 52 38 17 14 91 43 58 50 27 29 48
*  63 66 04 68 89 53 67 30 73 16 69 87 40 31
* 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
*
* NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
*/

//this is a dynamic programming problem
//generate the maximum path in each row iteratively.
//O(n)
long pe18() {
    const int rows = 15;
    vector<int> triangle[] = { //vector just because it makes it easy to implicitly declare a ragged array
        {75},
        {95, 64},
        {17, 47, 82},
        {18, 35, 87, 10},
        {20, 4, 82, 47, 65},
        {19, 1, 23, 75, 3, 34},
        {88, 2, 77, 73, 7, 63, 67},
        {99, 65, 4, 28, 6, 16, 70, 92},
        {41, 41, 26, 56, 83, 40, 80, 70, 33},
        {41, 48, 72, 33, 47, 32, 37, 16, 94, 29},
        {53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14},
        {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57},
        {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48},
        {63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31},
        {4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}
    };

    for (int i = 1; i < rows; i++) {                   //starting from the second row
        for (int j = 0; j < triangle[i].size(); j++) {   //go through each element
            int greaterParent;
#define myMax(a,b) (a>b)?a:b;              //we are going to overwrite the each element with the maximum path to reach it
            if (j == 0)
                greaterParent = triangle[i - 1][j];    //if we are looking at the first element in the row, then there is only one parent that can reach it
            else if (j == triangle[i].size() - 1)
                greaterParent = triangle[i - 1][j - 1]; //if we are looking at the last element in the row, then  there is only one parent that can reach it
            else
                greaterParent = myMax(triangle[i - 1][j], triangle[i - 1][j - 1]); //the maximum path is the maximum path to its parents

            triangle[i][j] += greaterParent; //add the value of the greatest path
        }
    }

    int max = -1;
    for (int i = 0; i < triangle[rows - 1].size(); i++) { //find the maximum path in the last row and return
        if (triangle[rows - 1][i] > max)
            max = triangle[rows - 1][i];
    }

    return max;
}

/* Problem 19
* 1 Jan 1900 was a Monday.
* Thirty days has September,
* April, June and November.
* All the rest have thirty-one,
* Saving February alone,
* Which has twenty-eight, rain or shine.
* And on leap years, twenty-nine.
* A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
*
* How many Sundays fell on the first of the month during the twentieth century(1 Jan 1901 to 31 Dec 2000) ?
*/
int pe19() {

    const char* days[] = { "mon", "tues", "wed", "thur", "fri", "sat", "sun" };
    const char* months[] = { "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" };
    int sundayMonths = 0;
    int year = 1900;
    int month = 0;
    int day = 0;
    int daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    while (year <= 2000) {
        bool isLeapYear = (!(year % 4) && (year % 100)) || (!(year % 100) && !(year % 400));
        for (int month = 0; month < 12; month++) {
            if (day == 6 && year >= 1901) {
                sundayMonths++;
            }
            int daysThisMonth = (isLeapYear && month == 1) ? daysInMonth[month] + 1 : daysInMonth[month];
            day = (day + daysThisMonth) % 7;
        }
        year++;
    }
    return sundayMonths;
}

int pe20() {
    const int productLen = 200;  // maximum amount of digits to calculate. for 100! you could assume a worst case of log10(100^100) = 200, (log10(100!) = 157.9)
    short* product = new short[productLen] {0}; //holds the end result
    product[0] = 1;

    short mostSignificantDigit = 0; // it should save some time if we track the leading digit rather than check each digit in the array.
    for (int i = 1; i <= 100; i++) { //i is the current number to multiply by to find the factorial. think of how you learned to multiply big numbers as a kid
        for (int d = mostSignificantDigit; d >= 0; d--) { //multiply each digit,product[d], by i
            int currentProduct = i * product[d];    //current product holds sub-product, or the current digit multiplied by i
            product[d] = (short)(currentProduct % 10);  //the new number digit in this position is always the last digit in the current product
            currentProduct /= 10;
            int k;
            for (k = 1; currentProduct; k++, currentProduct /= 10) { // add the current product to the other digits places
                currentProduct += product[d + k];
                product[d + k] = (short)(currentProduct % 10);
            }
            if (d + k - 1 > mostSignificantDigit) //recalculate most significant digit
                mostSignificantDigit = d + k;
        }
    }
    int sum = 0;
    for (int i = 0; i <= productLen - 1; i++) { // calculate sum of digits
        sum += product[i];
    }
    return sum;
}